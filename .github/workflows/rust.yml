# To debug a workflow see: https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-debug-logging

name: Rust CI

on:
  push:
  schedule:
    - cron: '0 2 * * SAT'

jobs:
  build-rs:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-20.04
          - name: macOS
            os: macOS-10.15
          - name: Windows
            os: windows-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true
      #- name: add additional dev tools # require for using compiletest_rs
      #  shell: bash
      #  run: rustup component add rustc-dev --toolchain nightly
      - name: build
        run: cd rs && cargo build
      - name: test
        run: cd rs && cargo test
      - name: demos
        run: |
          cd rs
          cargo run --bin quick-hash --manifest-path demos/quick-hash/Cargo.toml
          cargo run --bin cxx-interface --manifest-path demos/cxx-interface/Cargo.toml
      - name: examples
        run: |
          cd rs
          cargo run --example julia
          cargo run --example quick_julia
      - name: Python binding Unix
        shell: bash
        run: |
          cd rs/demos/pyrs-feature
          python3 -m venv venv
          source ./venv/bin/activate
          pip3 install maturin pytest
          maturin develop
          ./venv/bin/pytest
        if: runner.os != 'Windows'
      - name: Python binding Windows
        shell: bash
        run: |
          cd rs/demos/pyrs-feature
          python -m venv venv
          pushd .
          cd venv/Scripts
          . activate
          popd
          pip3 install maturin pytest
          maturin develop
          ./venv/Scripts/pytest.exe
        if: runner.os == 'Windows'
      - name: bencmarks
        run: cd rs && cargo bench
        