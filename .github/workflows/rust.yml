# To debug a workflow see: https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-debug-logging

name: Rust CI

env:
  DEFAULT_PYTHON_VERSION: "3.11"

on:
  push:
  schedule:
    - cron: '0 2 * * SAT'

jobs:
  build-rs:
    name: ${{ matrix.name }} build with ${{ matrix.toolchain }} Rust
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-22.04
            toolchain: stable
          - name: Linux
            os: ubuntu-22.04
            toolchain: nightly
          - name: macOS
            os: macOS-latest
            toolchain: stable
          - name: Windows
            os: windows-latest
            toolchain: stable
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
          default: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Configure Python venv path
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            BIN_VENV=./venv/Scripts
          else
            BIN_VENV=./venv/bin
          fi
          echo "BIN_VENV=${BIN_VENV}" >> $GITHUB_ENV
      - name: build
        run: cd rs && cargo build
      - name: test
        run: cd rs && cargo test
      - name: demos
        run: |
          cd rs
          cargo run --bin quick-hash --manifest-path demos/quick-hash/Cargo.toml
          cargo run --bin cxx-interface --manifest-path demos/cxx-interface/Cargo.toml
      - name: examples
        run: |
          cd rs
          cargo run --example julia
          cargo run --example quick_julia
      - name: Python binding Unix
        shell: bash
        run: |
          cd rs/demos/pyrs-feature
          python3 -m venv venv
          . ${BIN_VENV}/activate
          pip3 install -r requirements.txt
          maturin develop
          ${BIN_VENV}/pytest

        # Disable since it is too expensive  
        # - name: benchmarks
        #  run: cd rs && cargo bench
        
