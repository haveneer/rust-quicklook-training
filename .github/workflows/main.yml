# To debug a workflow see: https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-debug-logging

name: C++ CI

on: [ push ]

jobs:
  build-cpp-unix:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux GCC 11
            os: ubuntu-20.04
            c-compiler: gcc-11
            cxx-compiler: g++-11
          - name: Linux Clang 12
            os: ubuntu-20.04
            c-compiler: clang-12
            cxx-compiler: clang++-12
          - name: macOS 10.15
            os: macOS-10.15

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: install GCC-11
        run: |
          sudo apt install -qy software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt install -qy gcc-11 g++-11
        if: matrix.c-compiler == 'gcc-11' && runner.os == 'Linux'
      - name: install Clang-12
        run: |
          # for sources, see https://apt.llvm.org
          curl -Ls https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-add-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main'
          sudo apt update && sudo apt install -qy clang-12 libc++-12-dev libc++abi-12-dev
        if: matrix.c-compiler == 'clang-12' && runner.os == 'Linux'
      - name: install additional tools and libs
        run: |
          if [ "${{runner.os}}" == "Linux" ]; then
            sudo apt install -y ninja-build
          fi
          if [ "${{runner.os}}" == "macOS" ]; then
            brew install ninja
          fi        
      - name: configure
        run: |
          echo "Configure on $(uname -a)"
          cd cpp && mkdir build && cd build && CC=${{matrix.c-compiler}} CXX=${{matrix.cxx-compiler}} cmake .. -G Ninja 
      - name: build
        run: cd cpp && cmake --build build
      - name: test
        run: cd cpp/build && ctest

  build-cpp-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: configure
        run: cd cpp && mkdir build && cd build && cmake ..
      - name: build
        run: cd cpp && cmake --build build --config Debug
      - name: test
        run: cd cpp/build && ctest -C Debug

  build-rs:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-20.04
          - name: macOS
            os: macOS-10.15
          - name: Windows
            os: windows-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: build
        run: cd rs && cargo build --tests
      - name: test
        run: cd rs && cargo test
